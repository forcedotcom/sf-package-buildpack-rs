[env]
CARGO_TARGET_DIR="./target-cargo"

[env.development]
CARGO_PROFILE = "debug"
BUILD_FLAGS = ["build", "--target", "x86_64-unknown-linux-musl"]

[env.production]
CARGO_PROFILE = "release"
BUILD_FLAGS = ["build", "--target", "x86_64-unknown-linux-musl", "--release"]

[tasks.build]
args = ["@@split(BUILD_FLAGS, ;)"]

[tasks.build.mac]
dependencies = ["check-crosscompile-mac-deps"]

[tasks.build.mac.env]
"CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER" = "x86_64-linux-musl-ld"
"CC_x86_64_unknown_linux_musl" = "x86_64-linux-musl-gcc"

[tasks.strip]
condition = { profiles = [ "production" ], platforms = [ "linux" ] }
command = "strip"
args = ["target-cargo/x86_64-unknown-linux-musl/${CARGO_PROFILE}/${CARGO_MAKE_CRATE_NAME}"]

[tasks.check-crosscompile-mac-deps]
script_runner = "@rust"
script = '''
//! ```cargo
//! [dependencies]
//! which = "4.0.2"
//! colored = "2.0.0"
//! ```
// Silence warning from rust-script:
#![allow(non_snake_case)]
use which::which;
use colored::*;
use std::path::PathBuf;
use std::process::exit;
fn main() {
    let required_binaries = vec!["x86_64-linux-musl-ld", "x86_64-linux-musl-gcc"];
    let binaries = required_binaries.iter().map(which).collect::<Result<Vec<PathBuf>, _>>();
    if binaries.is_err() {
        println!("{}", "Required binaries for cross-compilation missing".bold().red());
        println!("{}", "===============================================".bold().red());
        println!("{}", "! Please make sure to install homebrew-musl-cross to enable cross compilation to Linux.".bold().red());
        println!("{}", "! https://github.com/FiloSottile/homebrew-musl-cross".bold().red());
        println!("");
        println!("Exiting...");
        exit(1);
    }
}
'''

[tasks.copy-files]
script_runner = "@rust"
script = '''
//! ```cargo
//! [dependencies]
//! colored = "2.0.0"
//! flate2 = "^1.0.22"
//! tar = "^0.4.37"
//! ```
// Silence warning from rust-script:
#![allow(non_snake_case)]
use std::path::PathBuf;
use std::fs;
use std::collections::HashMap;
use colored::*;

fn main() {
    copy_files("./target-cargo", "target");
    copy_files("./target-cargo/x86_64-unknown-linux-musl", "target/x86_64-unknown-linux-musl");
}

fn copy_files(from_root: &str, to_root: &str) {
    let destination = PathBuf::from(to_root);
    if destination.exists() {
        fs::remove_dir_all(&destination).unwrap();
    }
    fs::create_dir_all(&destination.join("bin")).unwrap();
    let mut files = HashMap::new();
    files.insert(PathBuf::from(from_root).join(env!("CARGO_PROFILE")).join(env!("CARGO_MAKE_CRATE_NAME")), destination.join("bin/build"));
    files.insert(PathBuf::from("./buildpack.toml"), destination.join("buildpack.toml"));
    files.insert(PathBuf::from("./package.toml"), destination.join("package.toml"));
    for (from, to) in &files {
        fs::copy(from, to).unwrap();
    }
    fs::hard_link(destination.join("bin/build"), destination.join("bin/detect")).unwrap();
    fs::hard_link(destination.join("bin/build"), destination.join("bin/test")).unwrap();
    fs::hard_link(destination.join("bin/build"), destination.join("bin/publish")).unwrap();
    fs::hard_link(destination.join("bin/build"), destination.join("bin/cli")).unwrap();
    println!("{}", "Successfully created buildpack directory".bold().green());
    println!("{}", "========================================".bold().green());
    println!("To try out your buildpack run:");
    println!("$ pack build sf-package -b {} --path {}", destination.to_str().unwrap().bold(), "$APP_DIR".bold());
    println!("");
}
'''

[tasks.archive]
script_runner = "@rust"
script = '''
//! ```cargo
//! [dependencies]
//! colored = "2.0.0"
//! flate2 = "^1.0.22"
//! tar = "^0.4.37"
//! ```
// Silence warning from rust-script:
#![allow(non_snake_case)]
use std::path::PathBuf;
use std::fs;
use colored::*;
use flate2::Compression;
use flate2::write::GzEncoder;

fn main() {
    let target = PathBuf::from("target");
    assert!(target.exists(), "Missing target dir");

    let tar_gz = fs::File::create("buildpack.tar.gz").unwrap();
    let enc = GzEncoder::new(tar_gz, Compression::default());
    let mut tar = tar::Builder::new(enc);
    match tar.append_dir_all(".", target) {
        Ok(_) =>
            print!("{}", "Successfully created buildpack archive".bold().green()),
        Err(e) => {
            print!("{}", "Failed to create buildpack archive".bold().red());
            print!("{}", e);
        }
    }

    println!();
}
'''

[tasks.pack]
dependencies = [
    "build",
    "strip",
    "copy-files"
]
